// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VPASS3_backend.Context;

#nullable disable

namespace VPASS3_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250609135904_UpdateCommonAreasConfiguration")]
    partial class UpdateCommonAreasConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VPASS3_backend.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Blacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdEstablishment")
                        .HasColumnType("int");

                    b.Property<int>("IdVisitor")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstablishment");

                    b.HasIndex("IdVisitor");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.CommonArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdEstablishment")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEstablishment");

                    b.ToTable("CommonAreas");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.ReservableCommonArea.CommonAreaReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPersonReservedBy")
                        .HasColumnType("int");

                    b.Property<int>("IdReservableCommonArea")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdPersonReservedBy");

                    b.HasIndex("IdReservableCommonArea");

                    b.ToTable("CommonAreaReservations");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.ReservableCommonArea.ReservationCommonAreaGuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("IdReservation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.HasIndex("IdReservation");

                    b.ToTable("ReservationCommonAreaGuests");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.UsableCommonArea.UtilizationUsableCommonAreaLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GuestsNumber")
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("IdUsableCommonArea")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("UsageTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.HasIndex("IdUsableCommonArea");

                    b.ToTable("UtilizationUsableCommonAreaLogs");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("VisitDirection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Establishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Establishments");
                });

            modelBuilder.Entity("VPASS3_backend.Models.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdEstablishment")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstablishment");

                    b.ToTable("ParkingSpots");
                });

            modelBuilder.Entity("VPASS3_backend.Models.ParkingSpotUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("AuthorizedTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdEntryVisit")
                        .HasColumnType("int");

                    b.Property<int?>("IdExitVisit")
                        .HasColumnType("int");

                    b.Property<int?>("ParkingSpotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("UsageTime")
                        .HasColumnType("time");

                    b.Property<int?>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEntryVisit");

                    b.HasIndex("IdExitVisit");

                    b.HasIndex("ParkingSpotId");

                    b.HasIndex("VisitorId");

                    b.ToTable("ParkingSpotUsageLogs");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("VPASS3_backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VPASS3_backend.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("AuthorizedTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<int>("IdDirection")
                        .HasColumnType("int");

                    b.Property<int?>("IdParkingSpot")
                        .HasColumnType("int");

                    b.Property<int>("IdVisitType")
                        .HasColumnType("int");

                    b.Property<int?>("IdZoneSection")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VehicleIncluded")
                        .HasColumnType("bit");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("IdDirection");

                    b.HasIndex("IdParkingSpot");

                    b.HasIndex("IdVisitType");

                    b.HasIndex("IdZoneSection");

                    b.HasIndex("VisitorId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("VPASS3_backend.Models.VisitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdEstablishment")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstablishment");

                    b.ToTable("VisitTypes");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("VPASS3_backend.Models.ZoneSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdZone")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdZone");

                    b.ToTable("ZoneSections");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.ReservableCommonArea.ReservableCommonArea", b =>
                {
                    b.HasBaseType("VPASS3_backend.Models.CommonAreas.CommonArea");

                    b.Property<TimeSpan?>("ReservationTime")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.UsableCommonArea.UsableCommonArea", b =>
                {
                    b.HasBaseType("VPASS3_backend.Models.CommonAreas.CommonArea");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("VPASS3_backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("VPASS3_backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VPASS3_backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("VPASS3_backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VPASS3_backend.Models.Blacklist", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Establishment", "Establishment")
                        .WithMany("Blacklists")
                        .HasForeignKey("IdEstablishment")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VPASS3_backend.Models.Visitor", "Visitor")
                        .WithMany("Blacklists")
                        .HasForeignKey("IdVisitor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Establishment");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.CommonArea", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Establishment", "Establishment")
                        .WithMany("CommonAreas")
                        .HasForeignKey("IdEstablishment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.ReservableCommonArea.CommonAreaReservation", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Person", "ReservedBy")
                        .WithMany()
                        .HasForeignKey("IdPersonReservedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VPASS3_backend.Models.CommonAreas.ReservableCommonArea.ReservableCommonArea", "ReservableCommonArea")
                        .WithMany("Reservations")
                        .HasForeignKey("IdReservableCommonArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservableCommonArea");

                    b.Navigation("ReservedBy");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.ReservableCommonArea.ReservationCommonAreaGuest", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VPASS3_backend.Models.CommonAreas.ReservableCommonArea.CommonAreaReservation", "CommonAreaReservation")
                        .WithMany("Guests")
                        .HasForeignKey("IdReservation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommonAreaReservation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.UsableCommonArea.UtilizationUsableCommonAreaLog", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VPASS3_backend.Models.CommonAreas.UsableCommonArea.UsableCommonArea", "UsableCommonArea")
                        .WithMany("UtilizationUsableCommonAreaLogs")
                        .HasForeignKey("IdUsableCommonArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("UsableCommonArea");
                });

            modelBuilder.Entity("VPASS3_backend.Models.ParkingSpot", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Establishment", "Establishment")
                        .WithMany("ParkingSpots")
                        .HasForeignKey("IdEstablishment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("VPASS3_backend.Models.ParkingSpotUsageLog", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Visit", "EntryVisit")
                        .WithMany()
                        .HasForeignKey("IdEntryVisit");

                    b.HasOne("VPASS3_backend.Models.Visit", "ExitVisit")
                        .WithMany()
                        .HasForeignKey("IdExitVisit");

                    b.HasOne("VPASS3_backend.Models.ParkingSpot", null)
                        .WithMany("UsageLogs")
                        .HasForeignKey("ParkingSpotId");

                    b.HasOne("VPASS3_backend.Models.Visitor", null)
                        .WithMany("UsageLogs")
                        .HasForeignKey("VisitorId");

                    b.Navigation("EntryVisit");

                    b.Navigation("ExitVisit");
                });

            modelBuilder.Entity("VPASS3_backend.Models.User", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Establishment", "Establishment")
                        .WithMany("Users")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Visit", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Establishment", "Establishment")
                        .WithMany("Visits")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VPASS3_backend.Models.Direction", "Direction")
                        .WithMany("Visits")
                        .HasForeignKey("IdDirection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VPASS3_backend.Models.ParkingSpot", "ParkingSpot")
                        .WithMany("Visits")
                        .HasForeignKey("IdParkingSpot")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VPASS3_backend.Models.VisitType", "VisitType")
                        .WithMany()
                        .HasForeignKey("IdVisitType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VPASS3_backend.Models.ZoneSection", "ZoneSection")
                        .WithMany()
                        .HasForeignKey("IdZoneSection")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("VPASS3_backend.Models.Visitor", "Visitor")
                        .WithMany("Visits")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VPASS3_backend.Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Direction");

                    b.Navigation("Establishment");

                    b.Navigation("ParkingSpot");

                    b.Navigation("VisitType");

                    b.Navigation("Visitor");

                    b.Navigation("Zone");

                    b.Navigation("ZoneSection");
                });

            modelBuilder.Entity("VPASS3_backend.Models.VisitType", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("IdEstablishment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Zone", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Establishment", "Establishment")
                        .WithMany("Zones")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("VPASS3_backend.Models.ZoneSection", b =>
                {
                    b.HasOne("VPASS3_backend.Models.Zone", "Zone")
                        .WithMany("ZoneSections")
                        .HasForeignKey("IdZone")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.ReservableCommonArea.CommonAreaReservation", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Direction", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Establishment", b =>
                {
                    b.Navigation("Blacklists");

                    b.Navigation("CommonAreas");

                    b.Navigation("ParkingSpots");

                    b.Navigation("Users");

                    b.Navigation("Visits");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("VPASS3_backend.Models.ParkingSpot", b =>
                {
                    b.Navigation("UsageLogs");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Visitor", b =>
                {
                    b.Navigation("Blacklists");

                    b.Navigation("UsageLogs");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("VPASS3_backend.Models.Zone", b =>
                {
                    b.Navigation("ZoneSections");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.ReservableCommonArea.ReservableCommonArea", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("VPASS3_backend.Models.CommonAreas.UsableCommonArea.UsableCommonArea", b =>
                {
                    b.Navigation("UtilizationUsableCommonAreaLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
